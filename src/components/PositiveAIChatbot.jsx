import React, { useState, useRef, useEffect } from 'react';
import { Send, Sun, Sparkles, Heart, Star } from 'lucide-react';

const PositiveAIChatbot = () => {
  const [messages, setMessages] = useState([
    {
      type: 'ai',
      content: 'Xin ch√†o! T√¥i l√† AI Sunshine üåû - tr·ª£ l√Ω t√≠ch c·ª±c c·ªßa b·∫°n! T√¥i ·ªü ƒë√¢y ƒë·ªÉ l·∫Øng nghe v√† mang ƒë·∫øn nh·ªØng l·ªùi khuy√™n t√≠ch c·ª±c. B·∫°n ƒëang c·∫£m th·∫•y th·∫ø n√†o h√¥m nay?',
      timestamp: new Date()
    }
  ]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);

  const positiveResponses = {
    greetings: [
      "Ch√†o b·∫°n! Th·∫≠t tuy·ªát khi ƒë∆∞·ª£c g·∫∑p b·∫°n h√¥m nay! üåü",
      "Xin ch√†o! B·∫°n ƒë√£ l√†m t√¥i vui l√™n ch·ªâ b·∫±ng vi·ªác gh√© thƒÉm! ‚ú®",
      "Hello! Hy v·ªçng h√¥m nay c·ªßa b·∫°n tr√†n ƒë·∫ßy ni·ªÅm vui! üåà"
    ],
    encouragement: [
      "B·∫°n ƒëang l√†m r·∫•t t·ªët! M·ªói b∆∞·ªõc nh·ªè ƒë·ªÅu c√≥ √Ω nghƒ©a l·ªõn! üí™",
      "Tin t∆∞·ªüng v√†o b·∫£n th√¢n - b·∫°n m·∫°nh m·∫Ω h∆°n b·∫°n nghƒ©! üåü",
      "Kh√≥ khƒÉn ch·ªâ l√† t·∫°m th·ªùi, nh∆∞ng s·ª©c m·∫°nh c·ªßa b·∫°n l√† vƒ©nh c·ª≠u! ‚ú®",
      "B·∫°n c√≥ th·ªÉ v∆∞·ª£t qua m·ªçi th·ª≠ th√°ch. T√¥i tin t∆∞·ªüng v√†o b·∫°n! üöÄ"
    ],
    motivation: [
      "H√¥m nay l√† m·ªôt ng√†y m·ªõi tuy·ªát v·ªùi ƒë·ªÉ b·∫Øt ƒë·∫ßu nh·ªØng ƒëi·ªÅu t√≠ch c·ª±c! üåÖ",
      "M·ªói th·∫•t b·∫°i ƒë·ªÅu d·∫°y ch√∫ng ta ƒëi·ªÅu g√¨ ƒë√≥ qu√Ω gi√°. H√£y h·ªçc h·ªèi v√† ti·∫øn l√™n! üìö",
      "Th√†nh c√¥ng kh√¥ng ph·∫£i ƒë√≠ch ƒë·∫øn, m√† l√† h√†nh tr√¨nh. H√£y t·∫≠n h∆∞·ªüng t·ª´ng b∆∞·ªõc! üõ§Ô∏è",
      "B·∫°n l√† t√°c gi·∫£ c·ªßa c√¢u chuy·ªán cu·ªôc ƒë·ªùi m√¨nh. H√£y vi·∫øt n√≥ th·∫≠t ƒë·∫πp! ‚úçÔ∏è"
    ],
    support: [
      "T√¥i hi·ªÉu b·∫°n ƒëang c·∫£m th·∫•y kh√≥ khƒÉn. Nh∆∞ng h√£y nh·ªõ, sau c∆°n m∆∞a s·∫Ω c√≥ c·∫ßu v·ªìng! üåà",
      "Kh√¥ng sao c·∫£, m·ªçi ng∆∞·ªùi ƒë·ªÅu c√≥ nh·ªØng ng√†y kh√≥ khƒÉn. ƒêi·ªÅu quan tr·ªçng l√† kh√¥ng b·ªè cu·ªôc! üíù",
      "B·∫°n kh√¥ng ƒë∆°n ƒë·ªôc. Lu√¥n c√≥ ng∆∞·ªùi quan t√¢m ƒë·∫øn b·∫°n, k·ªÉ c·∫£ t√¥i! ü§ó",
      "H√£y cho ph√©p b·∫£n th√¢n ƒë∆∞·ª£c ngh·ªâ ng∆°i v√† ph·ª•c h·ªìi. B·∫°n x·ª©ng ƒë√°ng ƒë∆∞·ª£c y√™u th∆∞∆°ng! üå∏"
    ],
    positivity: [
      "Cu·ªôc s·ªëng ƒë·∫πp bi·∫øt bao khi ch√∫ng ta bi·∫øt tr√¢n tr·ªçng nh·ªØng ƒëi·ªÅu nh·ªè b√©! üå∫",
      "N·ª• c∆∞·ªùi c·ªßa b·∫°n c√≥ th·ªÉ th·∫Øp s√°ng c·∫£ ng√†y c·ªßa ai ƒë√≥! üòä",
      "H√£y t·∫≠p trung v√†o nh·ªØng g√¨ b·∫°n c√≥, thay v√¨ nh·ªØng g√¨ b·∫°n thi·∫øu! üôè",
      "M·ªói ng√†y l√† m·ªôt m√≥n qu√† - ƒë√≥ l√† l√Ω do ng∆∞·ªùi ta g·ªçi n√≥ l√† 'hi·ªán t·∫°i'! üéÅ"
    ]
  };

  const getRandomResponse = (category) => {
    const responses = positiveResponses[category];
    return responses[Math.floor(Math.random() * responses.length)];
  };

  const generateAIResponse = (userMessage) => {
    const message = userMessage.toLowerCase();
    
    if (message.includes('xin ch√†o') || message.includes('hello') || message.includes('hi')) {
      return getRandomResponse('greetings');
    } else if (message.includes('bu·ªìn') || message.includes('kh√≥ khƒÉn') || message.includes('stress') || message.includes('m·ªát')) {
      return getRandomResponse('support');
    } else if (message.includes('ƒë·ªông vi√™n') || message.includes('khuy·∫øn kh√≠ch') || message.includes('help')) {
      return getRandomResponse('encouragement');
    } else if (message.includes('ƒë·ªông l·ª±c') || message.includes('motivation') || message.includes('th√†nh c√¥ng')) {
      return getRandomResponse('motivation');
    } else {
      return getRandomResponse('positivity');
    }
  };

  const handleSendMessage = async () => {
    if (!inputText.trim()) return;

    const userMessage = {
      type: 'user',
      content: inputText,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setIsTyping(true);

    // Simulate AI thinking time
    setTimeout(() => {
      const aiResponse = {
        type: 'ai',
        content: generateAIResponse(inputText),
        timestamp: new Date()
      };
      setMessages(prev => [...prev, aiResponse]);
      setIsTyping(false);
    }, 1000 + Math.random() * 2000);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-100 via-yellow-50 to-pink-100 flex flex-col">
      {/* Header */}
      <div className="bg-white/80 backdrop-blur-md shadow-lg border-b-2 border-yellow-200">
        <div className="max-w-4xl mx-auto px-4 py-6">
          <div className="flex items-center justify-center space-x-3">
            <div className="bg-gradient-to-r from-yellow-400 to-orange-400 p-3 rounded-full shadow-lg">
              <Sun className="w-8 h-8 text-white animate-spin" style={{animationDuration: '8s'}} />
            </div>
            <div className="text-center">
              <h1 className="text-3xl font-bold bg-gradient-to-r from-yellow-600 to-orange-600 bg-clip-text text-transparent">
                AI Sunshine
              </h1>
              <p className="text-gray-600 text-sm">Tr·ª£ l√Ω t√≠ch c·ª±c c·ªßa b·∫°n</p>
            </div>
            <div className="hidden sm:flex space-x-2">
              <Sparkles className="w-6 h-6 text-yellow-500 animate-pulse" />
              <Heart className="w-6 h-6 text-pink-500 animate-bounce" />
              <Star className="w-6 h-6 text-orange-500 animate-pulse" />
            </div>
          </div>
        </div>
      </div>

      {/* Chat Container */}
      <div className="flex-1 max-w-4xl mx-auto w-full px-4 py-6 flex flex-col">
        {/* Messages */}
        <div className="flex-1 space-y-4 mb-6 overflow-y-auto max-h-96">
          {messages.map((message, index) => (
            <div
              key={index}
              className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-xs sm:max-w-md lg:max-w-lg px-4 py-3 rounded-2xl shadow-md ${
                  message.type === 'user'
                    ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-br-sm'
                    : 'bg-white/90 backdrop-blur-sm text-gray-800 rounded-bl-sm border border-yellow-200'
                }`}
              >
                <p className="text-sm leading-relaxed">{message.content}</p>
                <p className={`text-xs mt-2 ${
                  message.type === 'user' ? 'text-blue-100' : 'text-gray-500'
                }`}>
                  {message.timestamp.toLocaleTimeString('vi-VN', {
                    hour: '2-digit',
                    minute: '2-digit'
                  })}
                </p>
              </div>
            </div>
          ))}

          {isTyping && (
            <div className="flex justify-start">
              <div className="bg-white/90 backdrop-blur-sm px-4 py-3 rounded-2xl rounded-bl-sm shadow-md border border-yellow-200">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-yellow-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-orange-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                  <div className="w-2 h-2 bg-pink-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* Input Area */}
        <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border-2 border-yellow-200 p-4">
          <div className="flex space-x-3">
            <textarea
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Chia s·∫ª suy nghƒ© c·ªßa b·∫°n v·ªõi AI Sunshine..."
              className="flex-1 resize-none border-0 bg-transparent placeholder-gray-500 text-gray-800 focus:outline-none focus:ring-0 text-sm leading-relaxed"
              rows="2"
              disabled={isTyping}
            />
            <button
              onClick={handleSendMessage}
              disabled={!inputText.trim() || isTyping}
              className="bg-gradient-to-r from-yellow-400 to-orange-400 hover:from-yellow-500 hover:to-orange-500 disabled:from-gray-300 disabled:to-gray-400 text-white p-3 rounded-full shadow-lg transition-all duration-200 transform hover:scale-105 disabled:scale-100"
            >
              <Send className="w-5 h-5" />
            </button>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="mt-4 flex flex-wrap gap-2 justify-center">
          {[
            "T√¥i c·∫ßn ƒë·ªông vi√™n üí™",
            "H√¥m nay th·∫ø n√†o? üåü",
            "Chia s·∫ª ƒëi·ªÅu t√≠ch c·ª±c ‚ú®",
            "C·∫£m ∆°n b·∫°n! üíù"
          ].map((suggestion, index) => (
            <button
              key={index}
              onClick={() => setInputText(suggestion.split(' ')[0] === 'T√¥i' ? suggestion : suggestion)}
              className="px-3 py-2 bg-white/60 hover:bg-white/80 backdrop-blur-sm rounded-full text-sm text-gray-700 border border-yellow-200 hover:border-yellow-300 transition-all duration-200 transform hover:scale-105"
            >
              {suggestion}
            </button>
          ))}
        </div>
      </div>

      {/* Footer with Copyright */}
      <footer className="bg-white/80 backdrop-blur-md border-t-2 border-yellow-200 mt-8">
        <div className="max-w-4xl mx-auto px-4 py-6">
          <div className="text-center">
            <div className="flex items-center justify-center space-x-2 mb-3">
              <Sun className="w-5 h-5 text-yellow-500" />
              <span className="text-lg font-semibold bg-gradient-to-r from-yellow-600 to-orange-600 bg-clip-text text-transparent">
                AI Sunshine
              </span>
              <Sun className="w-5 h-5 text-yellow-500" />
            </div>
            <p className="text-gray-600 text-sm mb-2">
              Mang l·∫°i nƒÉng l∆∞·ª£ng t√≠ch c·ª±c cho m·ªçi ng∆∞·ªùi üåü
            </p>
            <div className="border-t border-yellow-200 pt-3">
              <p className="text-gray-500 text-xs">
                ¬© 2025 B·∫£n quy·ªÅn thu·ªôc v·ªÅ <span className="font-semibold text-gray-700">Nguy·ªÖn Nh·∫≠t B·∫£o Anh</span>
              </p>
              <p className="text-gray-400 text-xs mt-1">
                Made with ‚ù§Ô∏è and ‚òÄÔ∏è
              </p>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default PositiveAIChatbot;
